$LOAD_PATH << '.'
require 'room_class.rb' #class for creating rooms
require 'rooms.rb' #list of available rooms and attributes
require 'player.rb' # class for player including current room and health stats

class Game # contains the main game methods
  include Scripts #Scripts module from modules.rb, contains story scripts

  def initialize
    @rooms = rooms.rb
    @used_rooms = []
    @omen_count = 0 #Omens are a game event that change the story line. Once the omen count reaches 10 the haunt starts
    @player = Character.new
    intro #script
    entry_hall("Main Hallway")
    game
  end

  def game
    if @omen_count < 10
      game_script
      choice = gets.chomp
      input_test(choice)
    else
      puts "Haunt"
    end
  end

  def input_test(choice)
    if choice.scan(/\D/).empty?
      choice = choice.to_i
      change_room(choice)
    elsif choice =~ /map/i
      map
    elsif choice =~ /front/i
      front_door
    elsif choice =~ /stairs/i
      change_floor
    else
      invalid_choice
      game
    end
  end

  def change_room(choice) #Starts the process of moving from one room to another
    if @player.current_room.doors[choice] == "" #If the door choice is not already assigned:
      to_room = room_name(@player.floor)
      @player.current_room.door_names[choice] = to_room #Gets new room name from randomizer and assignes it to the door choice in current room
      @player.current_room.doors[choice] = new_room(to_room) #Uses random room name to create new room class instance and assign it to door choice
      game
    else #If the door choice is assigned
      @player.current_room = @player.current_room.doors[choice]
      to_room = @player.current_room.name
      puts "You have entered the #{to_room}."
      game
    end
  end

  def room_name(floor) #Creates a room name from available rooms
    temp = @rooms.fetch(floor)

    @used_rooms.each do |room| #Removes already used rooms from the list of available rooms
        temp.delete("#{room}")
    end

    room = temp[rand(temp.length)] #Gets a random room from the reduced list
    @used_rooms << room
    puts "You have entered the #{room}."
    return room
  end

  def new_room(room) #Initiates a new instance of the room class, called by the random room generated by room_name method
    to_room = room
    from_room = @player.current_room.name
    room = Room.new(@player.current_room, to_room, from_room)
    @player.current_room = room
  end

  def front_door
    if @player.current_room.name =~ /Main Hallway/i
      puts "Locked, barred, and probably held shut by ghostly powers..."
      game
    else
      puts "There is no front door here..."
      game
    end
  end

  def change_floor
    if @player.floor == :main && @player.current_room.name == "Main Hallway"
      @player.floor = :upstairs
      upstairs_landing("Upstairs Landing")
      puts "Just as creepy up here..."
      puts "And still 4 doors."
      game
    elsif @player.floor == :upstairs && @player.current_room.name == "Upstairs Landing"
      @player.floor = :main
      change_room(:stairs)
    else
      puts "There are no stairs here..."
      game
    end
  end

  def map #Prints door numbers and the associated rooms
    @player.current_room.door_names.each do |k, v|
      if k.is_a? Integer
        print "Door #{k}: #{v}, "
      else
        print "#{k}: #{v}, "
      end
    end
    print "\n"
    game
  end

  def entry_hall(room) #initiates the "Main Hallway" room
    room = MainRoom.new
    @player.current_room = room
  end

  def upstairs_landing(room) #initiates the "Upstairs Landing" room
    if @player.current_room.door_names[:stairs] != "Upstairs Landing"
      room = UpstairsLanding.new
      room.doors[:stairs] = @player.current_room
      room.door_names[:stairs] = "Main Hallway"
      @player.current_room.door_names[:stairs] = "Upstairs Landing"
      @player.current_room.doors[:stairs] = room
      @player.current_room = room
    else
      change_room(:stairs)
    end
  end

end

game1 = Game.new
